/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.Search;

import java.awt.CardLayout;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Car;
import model.Driver;
import model.Uber;

/**
 *
 * @author Ketki Kule <kule.k@northeastern.edu>
 */
public class SearchWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchWorkAreaJPanel
     */
    JPanel displayPanel;
    Uber uber;
    int queryNumber;
    ArrayList<String> selectedManufacturers = new ArrayList<>();

    public SearchWorkAreaJPanel(JPanel displayPanel, Uber uber) {
        initComponents();
        this.displayPanel = displayPanel;
        this.uber = uber;
        loadData();
    }

    public void loadData() {

        lblSearchFactor.setVisible(false);
        txtSearchFactor.setVisible(false);
        lblManufacturers.setVisible(false);
        listManufacturers.setVisible(false);
        lblMaxSeats.setVisible(false);
        txtMaxSeats.setVisible(false);
        scrollPaneListManufacturers.setVisible(false);
        listManufacturers.removeAll();
        DefaultListModel model = new DefaultListModel();
        JList<String> list = new JList(model);
        ArrayList<String> manufacturersList = new ArrayList<>();

        for (Car car : uber.getCarDirectory().getCarList()) {
            if (!manufacturersList.contains(car.getManufacturer())) {
                manufacturersList.add(car.getManufacturer());
                model.addElement(car.getManufacturer());

            }
        }
        listManufacturers.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnSearchCars = new javax.swing.JButton();
        comboSearchOptions = new javax.swing.JComboBox<>();
        lblSearchFactor = new javax.swing.JLabel();
        txtSearchFactor = new javax.swing.JTextField();
        scrollPaneListManufacturers = new javax.swing.JScrollPane();
        listManufacturers = new javax.swing.JList<>();
        lblManufacturers = new javax.swing.JLabel();
        txtMaxSeats = new javax.swing.JTextField();
        lblMaxSeats = new javax.swing.JLabel();

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Search For Cars");

        btnSearchCars.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSearchCars.setText("Search  > >");
        btnSearchCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCarsActionPerformed(evt);
            }
        });

        comboSearchOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Find me the first available passenger car", "How many cars are currently available. How many are not", "List all cars that are made by specific manufacturers", "List all cars that were manufactured in a specific year", "List all cars with a minimum of x seats but no more than y seats", "Find a car with the given serial number", "List all cars given the model number", "List all the car manufacturers used by the (this) Uber", "When was the last time the fleet catalog was updated", "List all cars that are available in a given city", "List all cars that have expired maintenance certificate" }));
        comboSearchOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSearchOptionsActionPerformed(evt);
            }
        });

        listManufacturers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listManufacturers.setPreferredSize(new java.awt.Dimension(450, 54));
        listManufacturers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listManufacturersValueChanged(evt);
            }
        });
        scrollPaneListManufacturers.setViewportView(listManufacturers);

        lblManufacturers.setText("Select Manufacturers");

        lblMaxSeats.setText("Maximun Seats");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(629, 629, 629)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(comboSearchOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 727, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblSearchFactor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(199, 199, 199)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(scrollPaneListManufacturers)
                                .addComponent(txtSearchFactor, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 323, Short.MAX_VALUE)
                .addComponent(btnSearchCars, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(lblTitle)
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchCars, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(comboSearchOptions))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblSearchFactor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearchFactor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneListManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(242, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCarsActionPerformed
        // TODO add your handling code here:
        SearchCarJPanel ms = new SearchCarJPanel(displayPanel, uber, queryNumber);
        boolean isValidated = validateFields(ms);

        if (isValidated) {
            displayPanel.add(ms);
            CardLayout layout = (CardLayout) displayPanel.getLayout();
            layout.next(displayPanel);
        }
    }//GEN-LAST:event_btnSearchCarsActionPerformed

    private boolean validateFields(SearchCarJPanel searchCarJPanel) {
        boolean isValidated = false;
        switch (queryNumber) {
            case 0:
            case 1:
            case 7: //List all the car manufacturers used by the (this) Uber
            case 10: //List all cars that have expired maintenance certificate 
                isValidated = true;
                break;
            case 2: //List all cars that are made by specific manufacturers
                if (listManufacturers.getSelectedValuesList().size() > 0) {
                    isValidated = true;
                    searchCarJPanel.updateManufacturersSearch(selectedManufacturers);
                } else {
                    JOptionPane.showMessageDialog(null, "Please select a manufacturer ", "Invalid Selection", JOptionPane.WARNING_MESSAGE);

                }
                break;
            case 3://List all cars that were manufactured in a specific year
                if (txtSearchFactor.getText().length() > 0) {
                    int year = Integer.parseInt(txtSearchFactor.getText());
                    int currentYear = LocalDate.now().getYear();
                    System.out.println("year " + year);
                    System.out.println("CUrrent YEar " + currentYear);
                    if (year < 1970 || year > currentYear) {
                        isValidated = false;
                        JOptionPane.showMessageDialog(null, "Please select a valid year ", "Invalid Year", JOptionPane.WARNING_MESSAGE);
                    } else {
                        isValidated = true;
                        searchCarJPanel.updateManufacturingYear(year);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please All Fields ", "Empty Fields", JOptionPane.WARNING_MESSAGE);

                }
                break;
            case 4: //List all cars with a minimum of x seats but no more than y seats
                if (txtSearchFactor.getText().length() > 0 && txtMaxSeats.getText().length() > 0) {
                    int minSeats = Integer.parseInt(txtSearchFactor.getText());
                    int maxSeats = Integer.parseInt(txtMaxSeats.getText());

                    if (minSeats < 10 && minSeats > 0 && maxSeats > 0 && maxSeats < 10) {
                        isValidated = true;
                        searchCarJPanel.updateSeatsParams(minSeats, maxSeats);

                    } else {
                        isValidated = false;
                        JOptionPane.showMessageDialog(null, "Please select a valid year ", "Invalid Year", JOptionPane.WARNING_MESSAGE);

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please All Fields ", "Empty Fields", JOptionPane.WARNING_MESSAGE);

                }
                break;
            case 5: //Find a car with the given serial number
                if (txtSearchFactor.getText().length() > 0) {

                    for (Driver driver : uber.getDriverDirectory().getDriverList()) {
                        if (driver.getSerialNumber().equalsIgnoreCase(txtSearchFactor.getText())) {
                            isValidated = true;
                            searchCarJPanel.updateSerialNumber(driver.getSerialNumber());
                            break;
                        }
                    }
                    if (!isValidated) {
                        JOptionPane.showMessageDialog(null, "Please select a valid serial number ", "Invalid Serial Number", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please All Fields ", "Empty Fields", JOptionPane.WARNING_MESSAGE);

                }
                break;
            case 6: //List all cars given the model number 
                if (txtSearchFactor.getText().length() > 0) {
                    isValidated = true;
                    searchCarJPanel.updateModelNumber(txtSearchFactor.getText());
                } else {
                    JOptionPane.showMessageDialog(null, "Please All Fields ", "Empty Fields", JOptionPane.WARNING_MESSAGE);

                }
                break;
            case 8://When was the last time the fleet catalog was updated 
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd MMMM yyyy hh:mm");
                lblSearchFactor.setText("Last Updated: " + uber.getDriverDirectory().getDate().toString());
                break;
            case 9: //List all cars that are available in a given city 
                if (txtSearchFactor.getText().length() > 0) {
                    isValidated = true;
                    searchCarJPanel.updateCity(txtSearchFactor.getText());
                } else {
                    JOptionPane.showMessageDialog(null, "Please All Fields ", "Empty Fields", JOptionPane.WARNING_MESSAGE);
                }
                break;
        }

        return isValidated;
    }

    private void comboSearchOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSearchOptionsActionPerformed
        // TODO add your handling code here:
        queryNumber = comboSearchOptions.getSelectedIndex();
        switch (queryNumber) {
            case 0:
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(false);
                txtSearchFactor.setVisible(false);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
            case 1:
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(false);
                txtSearchFactor.setVisible(false);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
            case 2:
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(false);
                txtSearchFactor.setVisible(false);
                scrollPaneListManufacturers.setVisible(true);
                lblManufacturers.setVisible(true);
                listManufacturers.setVisible(true);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
            case 3:
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(true);
                txtSearchFactor.setVisible(true);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblSearchFactor.setText("Cars manufacturing year");
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
            case 4:
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(true);
                txtSearchFactor.setVisible(true);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(true);
                txtMaxSeats.setVisible(true);
                lblSearchFactor.setText("Minimum Seats");

                break;
            case 5: //Find a car with the given serial number
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(true);
                txtSearchFactor.setVisible(true);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                lblSearchFactor.setText("Enter Serial Number");
                break;
            case 6: //List all cars given the model number 
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(true);
                txtSearchFactor.setVisible(true);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                lblSearchFactor.setText("Enter Model Number");
                break;
            case 7://List all the car manufacturers used by the (this) Uber 
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(false);
                txtSearchFactor.setVisible(false);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
            case 8://When was the last time the fleet catalog was updated 
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(true);
                txtSearchFactor.setVisible(false);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
            case 9://List all cars that are available in a given city 
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(true);
                txtSearchFactor.setVisible(true);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                lblSearchFactor.setText("Enter City Name");
                break;
            case 10://List all cars that have expired maintenance certificate 
                btnSearchCars.setVisible(true);
                lblSearchFactor.setVisible(false);
                txtSearchFactor.setVisible(false);
                scrollPaneListManufacturers.setVisible(false);
                lblManufacturers.setVisible(false);
                listManufacturers.setVisible(false);
                lblMaxSeats.setVisible(false);
                txtMaxSeats.setVisible(false);
                break;
        }

    }//GEN-LAST:event_comboSearchOptionsActionPerformed

    private void listManufacturersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listManufacturersValueChanged
        // TODO add your handling code here:
        selectedManufacturers.clear();
        try {
            int[] selectedIndex = listManufacturers.getSelectedIndices();
            selectedManufacturers = (ArrayList<String>) listManufacturers.getSelectedValuesList();
            System.out.println("items " + Arrays.toString(selectedIndex));
            System.out.println("selectedManufacturers " + Arrays.toString(selectedManufacturers.toArray()));
        } catch (Exception ex) {
            System.out.println("Error: " + ex);
        }

    }//GEN-LAST:event_listManufacturersValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearchCars;
    private javax.swing.JComboBox<String> comboSearchOptions;
    private javax.swing.JLabel lblManufacturers;
    private javax.swing.JLabel lblMaxSeats;
    private javax.swing.JLabel lblSearchFactor;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList<String> listManufacturers;
    private javax.swing.JScrollPane scrollPaneListManufacturers;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtSearchFactor;
    // End of variables declaration//GEN-END:variables
}
