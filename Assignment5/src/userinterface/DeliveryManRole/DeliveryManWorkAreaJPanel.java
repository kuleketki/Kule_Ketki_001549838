/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.Order;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel displayPanel;
    private EcoSystem business;
    private UserAccount userAccount;
    private DeliveryMan deliveryMan;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();

        this.displayPanel = userProcessContainer;
        this.userAccount = account;
        this.business = business;

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for (DeliveryMan deliveryMan : business.getDeliveryManDirectory().getDeliveryManList()) {
            if (deliveryMan.getEmployeeId() == userAccount.getEmployee().getId()) {
                this.deliveryMan = deliveryMan;
            }
        }
        for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList()) {
            Order order = (Order) workRequest;

            if (!workRequest.getStatus().equals("Delivered")) {
                int quantity = 0;
                Object[] row = new Object[7];
                row[0] = workRequest;
                row[1] = order.getRestuarant().getRestaurantName();
                row[2] = order.getRestuarant().getAddress();
                row[3] = order.getCustomer().getFullName();
                row[4] = order.getCustomer().getAddress();
                row[5] = order.getStatus();
                row[6] = order.getRequestDate();

                model.addRow(row);

            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        btnDelivered = new javax.swing.JButton();
        btnPreviousOrders = new javax.swing.JButton();

        setBackground(new java.awt.Color(234, 226, 214));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Order Details");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, 360, 50));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Restaurant Name", "Pick Up Address", "Customer Name", "Drop Off Address", "Status", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 1120, 150));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(987, 40, 100, 40));

        btnDelivered.setText("Delivered");
        btnDelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveredActionPerformed(evt);
            }
        });
        add(btnDelivered, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 290, 120, 50));

        btnPreviousOrders.setText("Previous Orders");
        btnPreviousOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousOrdersActionPerformed(evt);
            }
        });
        add(btnPreviousOrders, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 290, 130, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void btnDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveredActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        }

        Order request = (Order) workRequestJTable.getValueAt(selectedRow, 0);
        request.setStatus("Delivered");
        request.setResolveDate(new Date());
        populateTable();


    }//GEN-LAST:event_btnDeliveredActionPerformed

    private void btnPreviousOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousOrdersActionPerformed
        // TODO add your handling code here:
        OrderHistoryJPanel workArea = new OrderHistoryJPanel(displayPanel, business, userAccount);
        displayPanel.add("OrderHistoryJPanel", workArea);
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.next(displayPanel);
    }//GEN-LAST:event_btnPreviousOrdersActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelivered;
    private javax.swing.JButton btnPreviousOrders;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
